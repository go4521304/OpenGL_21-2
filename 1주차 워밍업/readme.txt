1) 행렬 다루기
-4*4 행렬을 만들고 원하는 조건에 따라 반복문을 통해 계산을 진행했습니다.
-행렬식은 1행을 사용하여 전개를 하여 계산을 했습니다.
-4*4 행렬로 변환하고 구한 행렬식은 마지막 행을 기준으로 사용하면 
기존에 3*3 행렬식을 구하는 계산법과 똑같기 때문에 (마지막행 0 0 0 1) 그대로 행렬식을 계산해 출력했습니다.

2) 파일에서 데이터 읽기
-공백을 기준으로 string타입으로 문자열을 받아왔습니다.
-받아온 즉시 숫자가 있는지 검사를 진행하고 개수를 셌습니다.

3) 문자열 다루기
-문장 단위로 string타입으로 받아와서 vector 컨테이너에 저장합니다.
-루프문을 돌면서 각각 명령어를 실행합니다
-d는 reverse함수를 사용해서 전체를 뒤집어서 출력합니다.
-e는 한 문장을 순회하는 for문을 만들고 일정 갯수마다 *을 추가하여 새로운 문자열을 만들었습니다.
순회가 끝나면 새로 만든 문자열을 출력해줍니다.
-f는 e의 입력을 감시하는 플래그를 만들었고 이 플레그의 참, 거짓값에 따라 작동합니다. 작동방식은 문장을 순회하며
원하는 조건(띄어쓰기 혹은 e를 통해 만들어진 문자)가 발견되면 앞의 단어를 뒤집고 새로운 문자열에 집어넣는 방식으로 
만들었습니다.
-토글키는 입력한 순서대로 vector컨테이너에 저장하여 순서대로 적용해줍니다. 다만 토글키를 통해 한 동작은 원래 문자열에 영향을 주지 않습니다.
-h는 문자열을 순방향 반복자와 역방향 반복자를 통해서 비교를 하면서 출력해줍니다. 같은 문장이 아예 없으면 0을 출력합니다.
-g를 입력하면 바꾸고 싶은 문자와 바꿀 문자를 입력받습니다. 입력받은 문자는 find 함수와 replace함수를 사용하여 바꿔줍니다. g를 통해 진행한 내역은
원본 문자열에 반영됩니다.
 
4)
-랜덤엔진을 통해서 사각형의 좌표와 선분의 좌표를 받아옵니다.
-50씩 상하좌우로 움직이는데 움직일 때마다 벽과 충돌하는지 확인합니다.
-벽과 충돌하면 메세지를 출력하고 움직임을 취소합니다.
-벽과 충돌 여부는 좌표를 가지고 직접 확인했습니다.
-선분과 사각형의 충돌여부를 확인합니다.
-선분과 사각형의 충돌 확인 방법은 선분의 임의의 점과 사각형의 끝점 두개를 가지고 임의의 기울기를 만듭니다.
-사각형을 가지고 만든 기울기 사이에 선분의 기울기가 포함되면 선분은 사각형을 지나는 것입니다.

5)
-10개의 원소를 담는 배열과 데이터의 시작과 끝의 인덱스를 가지고있는 두 변수를 만들었습니다.
-맨 위에 원소를 추가하면 데이터의 끝을 나타내는 인덱스를 하나 늘려주고 추가해줍니다. 만약 위로 더이상 공간이 없으면 아래를 검색해서 빈칸을 찾아 넣어줍니다.
-맨 아래에 입력하는 것은 맨위에 데이터를 추가하는 방법과 방향만 반대고 같습니다. 다만 여기서는 맨아래에 공간이 없지만 맨 위는 공간이 남아있을 경우 한칸씩 위로
올려주고 맨 아래에 저장됩니다.
-삭제 알고리즘은 실제 데이터를 삭제하는 것이 아니라 데이터의 시작과 끝을 알려주는 인덱스를 조정해서 참조를 안하도록 했습니다.
-리스트를 비우거나 저장된 점의 개수를 구하는것 모두 인덱스를 사용했습니다.
-원점에서 가장 가까운 좌표와 가장 먼거리 모두 임의의 점을 기준으로 잡고 데이터를 순회하면서 원하는 값을 찾습니다.
-원점과의 거리를 기준으로 오름차순된 값은 사실 그 값을 저장하여 반영하는 것이 아니라 해당 기능을 실행해야하면 인덱스를 가지고 정렬을 한다음에 출력하는 방식으로
진행했습니다. 따라서 원본 데이터에는 어떤 변화가 없이 기존정보를 담고있습니다. 이 상황에서 삭제나 추가를 진행하면 원본 데이터를 기준으로 삭제와 추가가 진행되고
물론 해당 키가 토글되어 있으면 화면에는 새로 정렬이 된 값을 볼 수 있습니다.

6)
-확인을 위해 10*10 칸으로 줄여서 테스트했습니다.
-상단에 있는 전처리문 (XY)의 값을 바꾸면 칸을 조절 가능합니다.
-2차원 배열을 만들어줍니다.
-랜덤으로 값을 뽑아오고 이 값에 따라 방향을 정하고 이동합니다.
-만약 이동한 자리가 평면을 벗어난 자리거나 5번 이상 같은 방향으로 움직였거나 등등의 경우가 생길시에 다시 랜덤으로 방향 값을 뽑아오고 알맞는 값이 나올때까지
무한으로 반복합니다.
-적당한 방향으로 움직이면 위치를 표시하고 다시 위 과정을 끝지점에 도달할때 까지 반복합니다.